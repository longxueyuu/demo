package com.example.service;

import com.example.domain.model.Account;
import com.example.exception.BizException;
import com.example.jpa.User;
import com.example.jpa.UserRepository;
import com.example.util.JsonUtil;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

@Service
public class UserService {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    @Qualifier(value="xjdbcTemplate")
    private JdbcTemplate xjdbcTemplate;

    @Autowired
    @Qualifier(value="yjdbcTemplate")
    private JdbcTemplate yjdbcTemplate;


    @Transactional(transactionManager = "customJPATransactionManager", rollbackFor = RuntimeException.class )
    public User save(User user) throws BizException {
        System.out.println("service: save start");
        var r = userRepository.save(user);
        System.out.println("service: save end");

//        boolean v = true;
//        if (v == true) {
//            throw new BizException("biz exception");
//        }


        System.out.println("service: save normal");

        return r;
    }

    public List<User> findAll() {
        System.out.println("service: findAll start");

        List<User> users = new ArrayList<>();
       var s = userRepository.findAll();
       for (var x : s){
            users.add(x);
        }

        System.out.println("service: findAll end");
        return users;
    }

    public User getUserByName(String name, boolean exception) throws BizException {
        if (exception == true) {
            throw new BizException("getUserByName exception occurred");
        }

        return userRepository.getUserByName(name);
    }

    @Transactional(transactionManager = "xtransactionManager")
    public void SaveUserAccount(Account a, User u) throws BizException{
        System.out.println("service: SaveUserAccount start");
        String asq = "insert into account (uid, balance) values (?, ?)";
        xjdbcTemplate.update(asq, a.getUid(), a.getBalance());



        System.out.println("service: SaveUserAccount mid");


//        boolean v = true;
//        if (v == true) {
//            throw new RuntimeException("biz exception");
//        }

        String usq = "insert into user (email, name) values (?, ?)";
        xjdbcTemplate.update(usq, u.getEmail(), u.getName());
        System.out.println("service: SaveUserAccount end");
    }

    public void FindAccount() {
        String sq = "select * from account where id <= ?";
        List<Account> as = xjdbcTemplate.query(sq, new BeanPropertyRowMapper<>(Account.class), 2);
        System.out.println(JsonUtil.toJsonStr(as));
    }

    @Transactional(transactionManager = "yTransactionManager")
    public void UpdateAccount() {
    }


}
